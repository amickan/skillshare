Skills = paste(unique(currentskill), collapse = ",") ,
#Skills_details = paste(unique(data$Skills_details[indname]), collapse = ","),
Needs = paste(unique(data$Needs[indname]), collapse = ","),
#Needs_details = paste(unique(data$Needs_details[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*4))
}else {count = rbind(count,data.frame(Connections = 3))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
colors = c(color = brewer.pal(length(unique(data$Skills)),"Pastel1"))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <- colors[df_pairs$title]   # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
output$network <- renderVisNetwork({
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
})
output$nodes_data_from_shiny <- renderDataTable( {
if((!is.null(input$selskill) && !input$selskill == "") || (!is.null(input$selneed) && !input$selneed == "")){
info[(nodes$Skills %in% input$selskill | nodes$Needs %in% input$selneed), ]
}
else {info}
}, options = list(lengthMenu = c(5,30,50), pageLength = 5))
output$data_individual <- renderUI({
if (!is.null(input$current_node_id)) {
str1 <- paste(input$current_node_id," ",unique(data$Last_Name[data$First_Name == input$current_node_id]),",",unique(info$Department[info$id == input$current_node_id]))
str2 <- paste(unique(info$Email[info$id == input$current_node_id]))
str3 <- paste("My Skills:   ",unique(info$Skills[info$id == input$current_node_id]))
str4 <- paste(unique(data$Skills_details[data$First_Name == input$current_node_id]))
str5 <- paste("My Needs:    ",unique(info$Needs[info$id == input$current_node_id]))
str6 <- paste(unique(data$Needs_details[data$First_Name == input$current_node_id]))
HTML(paste(str1,str2," ",str3,str4," ",str5,str6,sep = '<br/>'))
}
})
# output$value <- renderPrint({ input$text })
observe({
if((!is.null(input$selskill) && !input$selskill == "") || (!is.null(input$selneed) && !input$selneed == "")){
skill_id <- nodes$Skills %in% input$selskill
need_id <- nodes$Needs %in% input$selneed
all_id <- skill_id | need_id
nodes_selection <- nodes$id[all_id]
nodes$color.background <- "gray"
nodes$color.border <- "gray"
nodes$color.background[all_id] <- "red"
nodes$color.border[all_id] <- "red"
}
else {nodes$color.background <- colors[nodes$Skills]}
visNetworkProxy("network") %>%
visUpdateNodes(nodes)
})
}
ui <- fluidPage(
titlePanel(title=div(img(src="MPI_logo.png"),"IMPRS Reciprocity Database")),
fluidRow(
column(4,
visNetworkOutput("network")),
column(8,
dataTableOutput("nodes_data_from_shiny"))
),
fluidRow(
column(4,
helpText('Click on one of the dot to get more details about individual: '),
htmlOutput("data_individual")),
column(8,
selectInput(inputId = "selskill", label = "Select person according to Skills", choices = nodes$Skills, multiple = TRUE),
selectInput(inputId = "selneed", label = "Select person according to Needs", choices = nodes$Needs, multiple = TRUE),
column(3,
actionButton(inputId = "reload", label = "Update data"))
# textInput("text", label = h3("Name query"), value = "Search for name...")
)
),
fluidRow(
column(4),
column(8,
tags$div(class="header", checked=NA,
tags$p("Join us!"),
tags$a("Click Here to add your skills & needs to the database and connect with the IMPRS circle!!",     href="https://docs.google.com/forms/d/e/1FAIpQLSfi6awwyMs4gUyxPhEgcAFeZ4cM0MovlwWtzWnQlRowPBrcWw/viewform?usp=sf_link"))
)
)
)
shiny::shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='imprs',
token='2DD7C69BBDF0B3E351A9C36B285BAD89',
secret='<SECRET>')
rm(list=list())
rm(list=list[])
library(rconnect)
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "examplar")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
data
nodes
df_pairs
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "examplar")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
df_pairs$width <- 5    # edge shadow
df_pairs
name
name = "Newbie TEst"
name = "Newbie Test"
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
currentskill
(length(unique(currentskill))==1)
nskill = NA
to_ind <- grepl(nskill,data$Needs)
to_ind
library(shiny)
runApp()
getwd()
library(shinz)
library(shiny)
runApp()
setwd(/Documents/)
getwd()
setwd "/Documents"
setwd("Documents")
setwd("shinyApp/imprs_reciprocity/")
runApp()
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "examplar")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
sort(unique(data$First_Name))
name = "Claudia Bruin"
(any(df_pairs == name))
setwd("/Users/sophiearana/Documents/shinyApp/skillshare/")
runApp()
sort(unique(data$First_Name)))
sort(unique(data$First_Name))
df_pairs
name = "Newbie Test"
(any(df_pairs == name))
name = "Donald Duck"
(any(df_pairs == name))
runApp()
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
#require(shiny)
require(visNetwork, quietly = TRUE) # library(visNetwork)
library(DT)
library(shinyjs)
runApp()
library(shiny)
runApp()
install.packages(shinyjs)
install.packages("shinyjs")
library(shinyjs)
runApp()
install.packages("DT")
library(DT)
runApp()
runApp()
runApp()
install.packages("bsModal")
library(bsModal)
??bsModal
install.packages("shinyBS")
library(shinyBS)
runApp()
?gs_edit_cell
??gs_edit_cell
library(googlesheets)
runApp()
?bsModal
runApp()
runApp(0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
formData()
?gs_edit_cell
??gs_edit_cell
runApp()
runApp()
runApp()
runApp()
num <- which(tolower(as.character(formData())) == tolower(as.character(input$Last_Name)))
formData()
database
input
df = loadData()
num <- which(tolower(as.character(df[,1]) == tolower(as.character(input$Last_Name)))
num <- which(tolower(as.character(df[,1]) == tolower(as.character(input$Last_Name))
df[,1]
df[,2]
df[,3]
input$Last_Name
formData
input
input$Last_Name
input$Last_Name <- "Mickan"
num <- which(tolower(as.character(df$Last_Name) == tolower(as.character(input$Last_Name))
num <- which(tolower(as.character(df$Last_Name) == tolower(as.character(input$Last_Name)))
num2 <- length(input[1,])
input[1,]
length(input)
num2 <- length(input)
input
input$Last_Name
length(input)
num
num <- which(tolower(as.character(df$Last_Name) == tolower(as.character(input$Last_Name2))))
tolower(as.character(df$Last_Name)
)
tolower(as.character(input$Last_Name2)))
tolower(as.character(input$Last_Name2))
input$Last_Name2
runApp()
df = loadData()
View(df)
num <- which(tolower(as.character(df$Last_Name) == tolower(as.character(input$Last_Name2))))
tolower(as.character(df$Last_Name)
)
tolower(as.character(input$Last_Name2))
which(tolower(as.character(df$Last_Name) == tolower(as.character(input$Last_Name2))))
num <- which(tolower(as.character(df$Last_Name)) == tolower(as.character(input$Last_Name2)))
num
letters(9)
letter(9)
runApp()
num:num2
textInput
?textInput
runApp()
runApp()
runApp()
?DT::renderDataTable
runApp()
runApp()
runApp()
priorInput <- gs_read(sheet,ws = worksheet, range = num:num2)
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
cat("A",12)
paste("A",12)
paste("A",12)->a
a
?gs_edit_cell
>>gs_edit_cell
??gs_edit_cell
paste("A",12, sep="")
runApp()
runApp()
runApp()
?brewer.pal
