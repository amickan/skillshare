mean(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2:Group2"] <- 0.5
fixef(model)["Condition:Group"] <- 0.5
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
warn <- last.warning
warn
warn <- lastResult()
last.warning(warn)
last.warning
warn
powerSim(model, fixed("Condition:Group", "z"), nsim = 50)
fixef(model)["Condition:Group"] <- 0.4
powerSim(model, fixed("Condition:Group", "z"), nsim = 50)
df$Subject_nr <- as.factor(df$Subject_nr)
df$Group <- as.factor(df$Group)
#data$Block <- as.factor(data$Block)
df$Item <- as.factor(df$Item)
df$Condition <- as.factor(df$Condition)
df$Error <- as.factor(df$Error)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2:Group2"] <- 0.5
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
model2 <- extend(model, along = "Subject_nr", n=100)
summary(model2)
pc2 <- powerCurve(model2, test = fixed("Condition2:Group2", "z"), along = "Subject_nr")
print(pc2)
fixef(model)["Condition2:Group2"] <- 0.3
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
fixef(model)["Condition2:Group2"] <- 0.2
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
nchar <- sample(4:10, p=c(rep(0.2,3),rep(0.1,4)),size = 40,replace = T)
# 1:20 = condition interference; 21:41 = condition non-interference
# 1:10 and 21:30 = group EN; 11:20 and 31:40 = group NL
Group <- c()
Subject_nr <- c()
Item <- c()
Condition <- c()
PhonCorr <- c()
PhonIncorr <- c()
for (i in 1:50) {
if (i %in% 1:25) {
#epsilon <- rnorm(1,mean=.8,sd=.05)
epsilon <- rnorm(1,mean=.7,sd=.05)
ppen <- c()
ppen[1:20] <- sapply(nchar[1:20], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
#epsilon <- rnorm(1,mean=.9,sd=.025)
epsilon <- rnorm(1,mean=.9,sd=.025)
ppen[21:40] <- sapply(nchar[21:40], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
Group <- c(Group, rep(2,40))
Subject_nr <- c(Subject_nr, rep(i,40))
Item <- c(Item, 1:40)
Condition <- c(Condition, c(rep(1,20),rep(2,20)))
PhonCorr <- c(PhonCorr, nchar-ppen)
PhonIncorr <- c(PhonIncorr,ppen)
} else {
#epsilon <- rnorm(1,mean=.85,sd=.05)
epsilon <- rnorm(1,mean=.75,sd=.05)
ppnl <- c()
ppnl[1:20] <- sapply(nchar[1:20], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
epsilon <- rnorm(1,mean=.9,sd=.05)
ppnl[21:40] <- sapply(nchar[21:40], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
Group <- c(Group, rep(1,40))
Subject_nr <- c(Subject_nr, rep(i,40))
Item <- c(Item, 1:40)
Condition <- c(Condition, c(rep(1,20),rep(2,20)))
PhonCorr <- c(PhonCorr, nchar-ppen)
PhonIncorr <- c(PhonIncorr,ppen)
}
}
df <- data.frame(Group,
Subject_nr,
Item,
Condition,
PhonCorr,
PhonIncorr)
mean(df[df$Condition == 1 & df$Group == 1,]$PhonIncorr)
mean(df[df$Condition == 1 & df$Group == 2,]$PhonIncorr)
mean(df[df$Condition == 2 & df$Group == 1,]$PhonIncorr)
mean(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2"] <- 2.5
df$Subject_nr <- as.factor(df$Subject_nr)
df$Group <- as.factor(df$Group)
#data$Block <- as.factor(data$Block)
df$Item <- as.factor(df$Item)
df$Condition <- as.factor(df$Condition)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2"] <- 2.5
powerSim(model, fixed("Condition2", "z"), nsim = 50)
fixef(model)["Condition2:Group2"] <- 0.2
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
Group <- c()
Subject_nr <- c()
Item <- c()
Condition <- c()
PhonCorr <- c()
PhonIncorr <- c()
for (i in 1:50) {
if (i %in% 1:25) {
#epsilon <- rnorm(1,mean=.8,sd=.05)
epsilon <- rnorm(1,mean=.7,sd=.05)
ppen <- c()
ppen[1:20] <- sapply(nchar[1:20], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
#epsilon <- rnorm(1,mean=.9,sd=.025)
epsilon <- rnorm(1,mean=.9,sd=.025)
ppen[21:40] <- sapply(nchar[21:40], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
Group <- c(Group, rep(2,40))
Subject_nr <- c(Subject_nr, rep(i,40))
Item <- c(Item, 1:40)
Condition <- c(Condition, c(rep(1,20),rep(2,20)))
PhonCorr <- c(PhonCorr, nchar-ppen)
PhonIncorr <- c(PhonIncorr,ppen)
} else {
#epsilon <- rnorm(1,mean=.85,sd=.05)
epsilon <- rnorm(1,mean=.75,sd=.05)
ppnl <- c()
ppnl[1:20] <- sapply(nchar[1:20], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
epsilon <- rnorm(1,mean=.9,sd=.05)
ppnl[21:40] <- sapply(nchar[21:40], function (x)
sample(0:x, 1, p=(c(epsilon,
rep(((1-epsilon)/2)/(x-1),x-1),
((1-epsilon)/2)))))
Group <- c(Group, rep(1,40))
Subject_nr <- c(Subject_nr, rep(i,40))
Item <- c(Item, 1:40)
Condition <- c(Condition, c(rep(1,20),rep(2,20)))
PhonCorr <- c(PhonCorr, nchar-ppen)
PhonIncorr <- c(PhonIncorr,ppen)
}
}
df <- data.frame(Group,
Subject_nr,
Item,
Condition,
PhonCorr,
PhonIncorr)
mean(df[df$Condition == 1 & df$Group == 1,]$PhonIncorr)
mean(df[df$Condition == 1 & df$Group == 2,]$PhonIncorr)
mean(df[df$Condition == 2 & df$Group == 1,]$PhonIncorr)
mean(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 1 & df$Group == 2,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 1,]$PhonIncorr)
sd(df[df$Condition == 2 & df$Group == 2,]$PhonIncorr)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2:Group2"] <- 2
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
df$Subject_nr <- as.factor(df$Subject_nr)
df$Group <- as.factor(df$Group)
#data$Block <- as.factor(data$Block)
df$Item <- as.factor(df$Item)
df$Condition <- as.factor(df$Condition)
#df$Error <- as.factor(df$Error)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2:Group2"] <- 2
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
model2 <- extend(model, along = "Subject_nr", n=100)
summary(model2)
pc2 <- powerCurve(model2, test = fixed("Condition2:Group2", "z"), along = "Subject_nr")
print(pc2)
plot(pc2)
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/", pNumber))
require(reshape)
require(data.table)
A = c(201,202,225,226)
data_list <- list()
data_list2 <- list()
data_list3 <- list()
for (i in 1:length(A)){
for (i in 1:length(A)){
pNumber = A[i]
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/", pNumber))
infile1 <- paste(pNumber,"Posttest.txt",sep="_")
infile2 <- paste(pNumber,"Finaltest.txt",sep="_")
currentFile <- as.data.frame(read.delim(infile1, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile[currentFile == 999]<-1
data_list[[i]] <- currentFile
currentFile2 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
##### marking unlearned words as missing values in posttest #####
for (j in 1:nrow(currentFile)) {
pos <- which(tolower(as.character(currentFile2$Item )) == tolower(as.character(currentFile$Item[j])))
if (currentFile$Error[j] == 1) {
currentFile2$Error[pos] <- NA}
}
currentFile2[currentFile2 == 999]<-1
data_list2[[i]] <- currentFile2
currentFile3 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile3[currentFile3 == 999]<-1
data_list3[[i]] <- currentFile3
print(A[i])
}
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/"))
setwd(file.path("\\cnas.ru.nl\Wrkgrp\L2-Attrition-Mickan\RESULTS_EXP1\"))
setwd(file.path("/Volumes/wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1"))
A = c(201,202,225,226)
data_list <- list()
data_list2 <- list()
data_list3 <- list()
for (i in 1:length(A)){
pNumber = A[i]
setwd(file.path("/Volumes/wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1", pNumber))
infile1 <- paste(pNumber,"Posttest.txt",sep="_")
infile2 <- paste(pNumber,"Finaltest.txt",sep="_")
currentFile <- as.data.frame(read.delim(infile1, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile[currentFile == 999]<-1
data_list[[i]] <- currentFile
currentFile2 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
##### marking unlearned words as missing values in posttest #####
for (j in 1:nrow(currentFile)) {
pos <- which(tolower(as.character(currentFile2$Item )) == tolower(as.character(currentFile$Item[j])))
if (currentFile$Error[j] == 1) {
currentFile2$Error[pos] <- NA}
}
currentFile2[currentFile2 == 999]<-1
data_list2[[i]] <- currentFile2
currentFile3 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile3[currentFile3 == 999]<-1
data_list3[[i]] <- currentFile3
print(A[i])
}
pre <- rbindlist(data_list)
post <- rbindlist(data_list2)
post2 <- rbindlist(data_list3)
post$Condition <- as.factor(post$Condition)
post$Language_Condition <- as.factor(post$Language_Condition)
post2$Condition <- as.factor(post2$Condition)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
lineplot + geom_line(stat = "identity", aes(fill=Language_Condition)) +
require(ggplot2)
require(plyr)
ddply(post, .(Condition, Language_Condition),
summarise, N=length(Error),
mean   = mean(Error, na.rm = TRUE),
sem = sd(Error, na.rm = TRUE)/sqrt(N)) -> aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
?ggplot
??ggplot
require(ggplot2)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
lineplot + geom_line(stat = "identity", aes(fill=Language_Condition)) +
geom_errorbar(width = 0.5, stat = identity) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
theme_bw()
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_line(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
post$Condition
aggregated
aggregated$Condition <- as.numeric(aggregated$Condition)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition), position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
ddply(post, .(Condition, Language_Condition, Subject_nr),
summarise, N=length(Error),
mean   = mean(Error, na.rm = TRUE),
sem = sd(Error, na.rm = TRUE)/sqrt(N)) -> aggregated
aggregated$Condition <- as.numeric(aggregated$Condition)
aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, group = Subject_nr))
lineplot + geom_point(), position =position_dodge(0.5)) +
geom_line(), position =position_dodge(0.5)) +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
lineplot + geom_point(position =position_dodge(0.5)) +
geom_line(position =position_dodge(0.5)) +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point() +
geom_line() +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, group = Subject_nr, color = Language_Condition))
lineplot + geom_point() +
geom_line() +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
install.packages("rmarkdown")
install.packages("knitr")
library(knitr)
library("knitr")
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
library(plotly)
require(visNetwork, quietly = TRUE) # library(visNetwork)
library(DT)
library(shinyjs)
library(shinyBS)
library(shiny)
runApp()
setwd("/Users/annemickan/Documents/skillshare")
runApp()
runApp()
runApp()
runApp()
?brewer.pal
runApp()
View(df_pairs)
View(nodes)
View(df_pairs)
View(nodes)
length(skills)
palet = colorRampPalette(brewer.pal(length(skills),"Pastel2"))
palet = colorRampPalette(brewer.pal(length(skills)))
palet = colorRampPalette(brewer.pal(length(skills),"Pastel3"))
palet = colorRampPalette(brewer.pal(length(skills),"Paired"))
palet = colorRampPalette(brewer.pal(length(unique(skills),"Paired"))
colors = data.frame(skills = sort(skills), colors = c(color = palet(length(skills))))
#set nodes parameters
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
#set nodes colors
nodes$color.background<- "#4bd8c1"
nodes$color.border<- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
#set edges parameters
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
df_pairs$width <- 5    # edge shadow
#output network
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T, dragNodes = FALSE) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
})
palet = colorRampPalette(brewer.pal(length(unique(skills)),"Paired"))
length(unique(skills))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(googlesheets)
?gs_edit_cell
??gs_edit_cell
install.packages("googlesheets")
library(googlesheets)
library)shiny
library(shiny)
library(RColorBrewer)
library(igraph)
library(plotly)
require(visNetwork, quietly = TRUE) # library(visNetwork)
library(DT)
library(shinyjs)
library(shinyBS)
runApp()
??gs_edit_cell
?gs_edit_cell
?gs_edit_cell
runApp()
gs_edit_cells()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sheet <- gs_title(table)
runApp()
runApp()
database
dataedit
sheet
database <- loadData()
View(database)
formData()
input$Skill
runApp()
