df$Subject_nr <- as.factor(df$Subject_nr)
df$Group <- as.factor(df$Group)
#data$Block <- as.factor(data$Block)
df$Item <- as.factor(df$Item)
df$Condition <- as.factor(df$Condition)
#df$Error <- as.factor(df$Error)
model <- glmer(cbind(PhonCorr, PhonIncorr) ~ Condition + Group + Group*Condition + (1|Subject_nr) + (1|Item), family = binomial, data = df)
summary(model)
fixef(model)["Condition2:Group2"] <- 2
powerSim(model, fixed("Condition2:Group2", "z"), nsim = 50)
model2 <- extend(model, along = "Subject_nr", n=100)
summary(model2)
pc2 <- powerCurve(model2, test = fixed("Condition2:Group2", "z"), along = "Subject_nr")
print(pc2)
plot(pc2)
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/", pNumber))
require(reshape)
require(data.table)
A = c(201,202,225,226)
data_list <- list()
data_list2 <- list()
data_list3 <- list()
for (i in 1:length(A)){
for (i in 1:length(A)){
pNumber = A[i]
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/", pNumber))
infile1 <- paste(pNumber,"Posttest.txt",sep="_")
infile2 <- paste(pNumber,"Finaltest.txt",sep="_")
currentFile <- as.data.frame(read.delim(infile1, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile[currentFile == 999]<-1
data_list[[i]] <- currentFile
currentFile2 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
##### marking unlearned words as missing values in posttest #####
for (j in 1:nrow(currentFile)) {
pos <- which(tolower(as.character(currentFile2$Item )) == tolower(as.character(currentFile$Item[j])))
if (currentFile$Error[j] == 1) {
currentFile2$Error[pos] <- NA}
}
currentFile2[currentFile2 == 999]<-1
data_list2[[i]] <- currentFile2
currentFile3 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile3[currentFile3 == 999]<-1
data_list3[[i]] <- currentFile3
print(A[i])
}
setwd(file.path("//cnas.ru.nl/Wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1/"))
setwd(file.path("\\cnas.ru.nl\Wrkgrp\L2-Attrition-Mickan\RESULTS_EXP1\"))
setwd(file.path("/Volumes/wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1"))
A = c(201,202,225,226)
data_list <- list()
data_list2 <- list()
data_list3 <- list()
for (i in 1:length(A)){
pNumber = A[i]
setwd(file.path("/Volumes/wrkgrp/L2-Attrition-Mickan/RESULTS_EXP1", pNumber))
infile1 <- paste(pNumber,"Posttest.txt",sep="_")
infile2 <- paste(pNumber,"Finaltest.txt",sep="_")
currentFile <- as.data.frame(read.delim(infile1, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile[currentFile == 999]<-1
data_list[[i]] <- currentFile
currentFile2 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
##### marking unlearned words as missing values in posttest #####
for (j in 1:nrow(currentFile)) {
pos <- which(tolower(as.character(currentFile2$Item )) == tolower(as.character(currentFile$Item[j])))
if (currentFile$Error[j] == 1) {
currentFile2$Error[pos] <- NA}
}
currentFile2[currentFile2 == 999]<-1
data_list2[[i]] <- currentFile2
currentFile3 <- as.data.frame(read.delim(infile2, stringsAsFactors=FALSE, sep = "\t", header = T))
currentFile3[currentFile3 == 999]<-1
data_list3[[i]] <- currentFile3
print(A[i])
}
pre <- rbindlist(data_list)
post <- rbindlist(data_list2)
post2 <- rbindlist(data_list3)
post$Condition <- as.factor(post$Condition)
post$Language_Condition <- as.factor(post$Language_Condition)
post2$Condition <- as.factor(post2$Condition)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
lineplot + geom_line(stat = "identity", aes(fill=Language_Condition)) +
require(ggplot2)
require(plyr)
ddply(post, .(Condition, Language_Condition),
summarise, N=length(Error),
mean   = mean(Error, na.rm = TRUE),
sem = sd(Error, na.rm = TRUE)/sqrt(N)) -> aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
?ggplot
??ggplot
require(ggplot2)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, ymin = 0, ymax = 100))
lineplot + geom_line(stat = "identity", aes(fill=Language_Condition)) +
geom_errorbar(width = 0.5, stat = identity) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
theme_bw()
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_line(stat = "identity", aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_discrete(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
post$Condition
aggregated
aggregated$Condition <- as.numeric(aggregated$Condition)
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference")) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition))
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point(aes(color=Language_Condition),position =position_dodge(0.5)) +
geom_line(aes(color=Language_Condition), position =position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
ddply(post, .(Condition, Language_Condition, Subject_nr),
summarise, N=length(Error),
mean   = mean(Error, na.rm = TRUE),
sem = sd(Error, na.rm = TRUE)/sqrt(N)) -> aggregated
aggregated$Condition <- as.numeric(aggregated$Condition)
aggregated
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, group = Subject_nr))
lineplot + geom_point(), position =position_dodge(0.5)) +
geom_line(), position =position_dodge(0.5)) +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
lineplot + geom_point(position =position_dodge(0.5)) +
geom_line(position =position_dodge(0.5)) +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot + geom_point() +
geom_line() +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
lineplot <- ggplot(aggregated, aes(y = mean, x = Condition, group = Subject_nr, color = Language_Condition))
lineplot + geom_point() +
geom_line() +
#geom_errorbar(aes(ymin=mean-sem,ymax=mean+sem, color = Language_Condition),width = 0.5, position =position_dodge(0.5)) +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20)) +
#facet_wrap(~Condition) +
scale_x_continuous(labels=c("Interference", "No interference"), breaks = 1:2) +
ylab("Percentage correctly recalled words in Spanish") +
scale_color_manual("Language Condition", values=c("dodgerblue4","firebrick"),labels=c("Dutch","English")) +
theme_bw()
install.packages("rmarkdown")
install.packages("knitr")
library(knitr)
library("knitr")
setwd("/Users/annemickan/Documents/skillshare")
require(shiny)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
require(shiny)
require(visNetwork, quietly = TRUE) # library(visNetwork)
library(DT)
library(shinyjs)
library(shinyBS)
runApp()
runApp()
runApp()
?renderUI
runApp()
?htmlOutput
?htmlOutput
runApp()
input$current_node_id
!is.null(input$current_node_id)
paste(input$current_node_id,", ",unique(info$Department[info$id == input$current_node_id]))
input$current_node_id
info$Department
input$Department
input$Department[input$current_node_id]
input$Department[input$current_node_id,]
input
input$Department
input$current_node_id
database <- loadData()
paste(database$First_Name,database$Last_Name)
index <- which(tolower(as.character(paste(database$First_Name,database$Last_Name)) == tolower(as.character(input$current_node_id)))
str1 <- paste(input$current_node_id,", ",(info$Department[info$id == input$current_node_id]))
str2 <- paste(na.omit(unique(info$Email[info$id == input$current_node_id])))  # @Sophie: why unique here?
str3 <- paste("My Skills:   ",unique(info$Skills[info$id == input$current_node_id]))
str4 <- paste(na.omit(unique(data$Skills_details[data$Fullname == input$current_node_id])))
str5 <- paste("My Needs:    ",unique(info$Needs[info$id == input$current_node_id]))
str6 <- paste(na.omit(unique(data$Needs_details[data$Fullname == input$current_node_id])))
showModal(modalDialog(
title = "Individual information:",
HTML(paste(str1,str2," ",str3,str4," ",str5,str6,sep = '<br/>'))
footer = tagList(
modalButton("BUTok", "OK")
)
))
}
})
index <- which(tolower(as.character(paste(database$First_Name,database$Last_Name)) == tolower(as.character(input$current_node_id))))
tolower(as.character(input$current_node_id))
tolower(as.character(paste(database$First_Name,database$Last_Name)))
index <- which(tolower(as.character(paste(database$First_Name,database$Last_Name))) == tolower(as.character(input$current_node_id)))
indez
index
database$Department[index,]
database$Department[index]
str3 <- paste("My Skills:   ",unique(database$Skills[index]))
str2 <- paste(na.omit(unique(database$Email[index])))  # @Sophie: why unique here?
database$Email[index]
database$Email
View(database)
str4 <- paste(na.omit(unique(database$Skills_details[index])))
str5 <- paste("My Needs:    ",unique(database$Needs[index]))
str6 <- paste(na.omit(unique(database$Needs_details[index])))
showModal(modalDialog(
title = "Individual information:",
HTML(paste(str1,str2," ",str3,str4," ",str5,str6,sep = '<br/>'))
footer = tagList(
modalButton("BUTok", "OK")
)
))
?htmlOutput
runApp()
runApp()
runApp()
?validateIcon
??validateIcon
?showModal
?showModal
runApp()
runApp()
runApp()
runApp()
runApp()
?visEvents
runApp()
networkgraph
graphinfo
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T, dragNodes = FALSE) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T, dragNodes = FALSE) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}
visEvents
?observeEvent
visEvents
runApp()
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T, dragNodes = FALSE) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
visEvents
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/annemickan/Documents/PhD/MultilevelCourse")
mydata <- read.table("7.1.txt",  header = TRUE, sep = ",")
str(mydata)
library(lme4)
fit <- glmer(antemed ~ (1 | comm),  family = binomial("logit"), data = mydata)
hist(antemed)
hist(mydata$antemed)
summary(fit)
fita <-  glm(antemed ~ 1, data = mydata, family = binomial("logit"))
logLik(fita)-logLik(fit)
u0 <- ranef(fit, postVar = TRUE)
u0 <- ranef(fit, condVar = TRUE)
u0se <- sqrt(attr(u0[[1]], "postVar")[1, , ])
commid <-  as.numeric(rownames(u0[[1]]))
u0tab <- cbind("commid" = commid, "u0" = u0[[1]],  "u0se" = u0se)
colnames(u0tab)[2]  <- "u0"
u0tab <- u0tab[order(u0tab$u0), ]
u0tab <- cbind(u0tab, c(1:dim(u0tab)[1]))
u0tab <- u0tab[order(u0tab$commid), ]
colnames(u0tab)[4] <- "u0rank"
lot(u0tab$u0rank, u0tab$u0, type = "n",  xlab = "u_rank", ylab = "conditional
modes of r.e. for  comm_id:_cons", ylim = c(-4, 4))
plot(u0tab$u0rank, u0tab$u0, type = "n",  xlab = "u_rank", ylab = "conditional
modes of r.e. for  comm_id:_cons", ylim = c(-4, 4))
segments(u0tab$u0rank, u0tab$u0 - 1.96*u0tab$u0se,  u0tab$u0rank, u0tab$u0 +
1.96*u0tab$u0se)
v
points(u0tab$u0rank, u0tab$u0, col = "blue")
abline(h = 0, col =  "red")
(fit2 <- glmer(antemed ~ magec + (1 | comm), family = binomial("logit"), data = mydata))
fit2 <- glmer(antemed ~ magec + (1 | comm), family = binomial("logit"), data = mydata)
summary(fit2)
predprob <- fitted(fit2)
library(VGAM)
install.packages("VGAMdata")
library(VGAMdata)
predlogit <- logit(predprob)
install.packages("VGAM")
predlogit <- logit(predprob)
??logit
predlogit <- logit(VGAMdata::predprob)
install.packages("LOGIT")
library(LOGIT)
predlogit <- logit(VGAMdata::predprob)
(fit3 <-  glmer(antemed ~ magec + magecsq + (1 | comm), family =
binomial("logit"), data = mydata))
summary(fit3)
expa(-0.509)1
mydata <- read.table("7.2.txt",  header = TRUE, sep = ",")
summary(mydata$wealth)
mydata$wealthc <-  mydata$wealth - mean(mydata$wealth)
e
fit <- glmer(antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc + (1 | comm), data = mydata, family = binomial("logit"))
wealthmean <- tapply(mydata$wealth,  mydata$comm, mean)
hist(wealthmean, xlim = c(0, 5), breaks =  25)
wealthmean
fitb <- glm(antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc, data =
mydata, family = binomial("logit"))
summary(fitb)
runApp('~/Documents/skillshare')
mydata <- read.table("7.3.txt",  header = TRUE, sep = ",")
setwd("/Users/annemickan/Documents/PhD/MultilevelCourse")
mydata <- read.table("7.3.txt",  header = TRUE, sep = ",")
mydata <- read.table("7.4.txt",  header = TRUE, sep = ",")
fit <- glmer(antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc + (1 |
comm), data = mydata, family = binomial("logit"))
mydatapred <- mydata
mydatapred$magec <- 0
mydatapred$magecsq <- 0
X <-  model.matrix(terms(fit), mydatapred)
View(X)
b <- fixef(fit)
medianpredproblogit <- X %*% b
medianpredproblogit
medianpredprob <- logit(medianpredproblogit, inverse = TRUE)
mydatapred2 <- unique(data.frame(cbind("medianpredprob" = medianpredprob,
"medianpredproblogit" = medianpredproblogit, wealth = mydatapred$wealth, meduc =
mydata$meduc)))
swealth <- rep(mydatapred2$wealth, 1000)
mydata <- read.table("7.5.txt",  header = TRUE, sep = ",")
fit <- glmer(antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc +
(1 + wealthc | comm), data = mydata, family = binomial("logit"))
summary(fit)
reffects <- ranef(fit, postVar = TRUE)
reffects <- ranef(fit, condVar = TRUE)
plot(reffects[[1]], xlab = "standardized  random effects for comm: (Intercept)",
ylab = "standardized random  effects for comm:wealthc", xlim = c(-2, 2.1))
abline(v = 0, col =  "red")
abline(h = 0, col =  "red")
mydatapred$magec <- 0
mydatapred$magecsq <- 0
mydatapred$meduc2 <- 0
mydatapred$meduc3 <- 0
X <- model.matrix(terms(fit), mydatapred)
b <- fixef(fit)
predlogit <- X %*% b
mydatapred2 <- unique(data.frame(cbind(predlogit = predlogit, wealthc =
mydatapred$wealthc, comm = mydatapred$comm, wealth = mydatapred$wealth)))
colnames(mydatapred2)[1] <- c("predlogit")
re_id <- as.integer(rownames(reffects$comm))
u0 <- data.frame(cbind(commid = re_id, u0 = reffects[[1]][, 1]))
u1 <- data.frame(cbind(commid = re_id, u1 = reffects[[1]][, 2]))
for (i in  1:dim(mydatapred2)[1]){
mydatapred2$predlogit[i] <-  mydatapred2$predlogit[i] + u0$u0[u0$commid ==
mydatapred2$comm[i]] +  u1$u1[u1$commid == mydatapred2$comm[i]] *
mydatapred2$wealthc[i]
}
xyplot(predlogit ~ wealth, data = mydatapred2,  groups = comm, type =
c("p","l"), col = "blue",  xlab = "wealth index (1 = poorest)")
??xyplot
library(car)
xyplot(predlogit ~ wealth, data = mydatapred2,  groups = comm, type =
c("p","l"), col = "blue",  xlab = "wealth index (1 = poorest)")
fit2 <- glmer(antemed ~ magec + magecsq + meduc2 + meduc3 + wealth2 + wealth3
+ wealth4 + wealth5 + (1 | comm), family = binomial("logit"), data = mydata)
X <- model.matrix(terms(fit2), mydatapred3)
mydatapred3$magec <- 0
mydatapred3$magecsq <- 0
mean(mydatapred3$meduc2)
mydatapred3$meduc2 <- mean(mydatapred3$meduc2)
mean(mydatapred3$meduc3)
mydatapred3$meduc3 <- mean(mydatapred3$meduc3)
mydatapred3 <- mydata
mydatapred3$magec <- 0
mydatapred3$magecsq <- 0
mean(mydatapred3$meduc2)
mydatapred3$meduc2 <- mean(mydatapred3$meduc2)
mean(mydatapred3$meduc3)
mydatapred3$meduc3 <- mean(mydatapred3$meduc3)
X <- model.matrix(terms(fit2), mydatapred3)
b <- fixef(fit2)
predlogit <- X %*% b
predprob <- logit(predlogit, inverse = TRUE)
anova(fit2, fit3)
fit4 <- glmer(antemed ~ magec + magecsq + meduc2 + meduc3 + wealth2 + wealth3 +
wealth4 + wealth5 + (1 + wealth4 + wealth5 | comm), family = binomial("logit"),
data = mydata)
anova(fit3, fit4)
df <- read.delim("bang.txt")
df <- read.delim("bang.txt", sep = "")
df <- read.delim("bang.txt", sep = " ")
df <- read.delim("bang.txt", sep = ",")
lc1<-as.numeric(lc==1)
lc2<-as.numeric(lc==2)
lc3<-as.numeric(lc==3)
View(df)
lc1<-as.numeric(lc==1)
lc2<-as.numeric(lc==2)
lc3<-as.numeric(lc==3)
lc1<-as.numeric(df$lc==1)
lc2<-as.numeric(df$lc==2)
lc3<-as.numeric(df$lc==3)
lc1
df$lc1<-as.numeric(df$lc==1)
df$lc2<-as.numeric(df$lc==2)
df$lc3<-as.numeric(df$lc==3)
View(df)
fit <- glmer(use~age+urban+lc1+lc2+lc3+(1|district), familu = binomial("logit"), data=df)
fit <- glmer(use~age+urban+lc1+lc2+lc3+(1|district), family = binomial("logit"), data=df)
summary(fit)
fit <- glmer(use~age+urban+lc1+lc2+lc3+(1+urban|district), family = binomial("logit"), data=df)
setwd("/Users/annemickan/Documents/skillshare")
setwd("/Users/annemickan/Documents/skillshare")
runApp()
runApp()
