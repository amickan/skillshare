}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs
runApp()
runApp()
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*5))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
palet
palet = brewer.pal(length(unique(skills_sort)),"Pastel1")
palet = brewer.pal(9,"Pastel1")
palet
palet(9
)
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
palet(9)
palet(10)
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <- "white" #colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
visNetwork(nodes,df_pairs) %>%
visIgraphLayout(layout = "layout_in_circle") %>%
visOptions(highlightNearest = FALSE
#nodesIdSelection = TRUE
#selectedBy = list(variable = "Skills")
) %>%
visInteraction(hover = T, hoverConnectedEdges = T, dragNodes = FALSE) %>%
visEvents(click = "function(nodes){
Shiny.onInputChange('current_node_id', nodes.nodes);}"
)
runApp()
runa
runApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
runApp()
deployApp()
runApp()
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
df_pairs
runApp()
deployApp()
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
runa
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "examplar")
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
runa
runApp()
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*5))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
df_pairs
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
deployApp()
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
nodes
name
name = "Amie Fairs"
which(df_pairs == name)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "data_form")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
df_pairs$hoverWidth <- 5    # edge shadow
runApp()
runApp()
runApp()
runa
runApp()
runApp()
runApp()
runApp()
runApp()
pdf(NULL)
# Libraries
library(visNetwork)
library(googlesheets)
library(RColorBrewer)
library(igraph)
library(plotly)
# data: edge matrix
key <-extract_key_from_url('https://docs.google.com/spreadsheets/d/1zsG-2R8CMXYjUKd4Cx_EzvIelFR7nGHp4ixSuuvdy7g/edit?usp=sharing')
gap <- key %>% gs_key()
data <- gap %>% gs_read(ws = "examplar")
data <- within(data,  First_Name <- paste(First_Name, Last_Name, sep=" "))
#disolve formatting differences
data$Skills = tolower(data$Skills)
data$Needs = tolower(data$Needs)
#find pairs of people where skills match needs and create new table with one row per pair (with repetitions)
df_pairs <- data.frame()
nodes <- data.frame()
skills_sort <- character()
needs_sort <- character()
for (name in sort(unique(data$First_Name))) {
combined <- 0
indname <- which(data$First_Name %in% name)
currentskill <- unlist(strsplit(data$Skills[indname],","))
currentneed <- unlist(strsplit(data$Needs[indname],","))
if (length(unique(currentskill))==1) {currentskill <- unique(currentskill)}
for (nskill in currentskill){
skills_sort <- rbind(skills_sort,nskill)
to_ind <- grepl(nskill,data$Needs)
to <- data$First_Name[to_ind]
from <- rep(name,length(to))
title <- nskill
if (length(to)!=0) {combined <- rbind(from,to,title)
df_pairs <- rbind(df_pairs,as.data.frame(t(combined)))
}
for (need in currentneed){
needs_sort <- rbind(needs_sort,need)
}
}
nodes <- rbind(nodes,data.frame(id = name,
Skills = paste(unique(currentskill), collapse = ",") ,
Needs = paste(unique(data$Needs[indname]), collapse = ","),
Department = paste(unique(data$Department[indname]), collapse = ",")))
}
df_pairs$title <- as.character(df_pairs$title)
df_pairs      <-  df_pairs[order(df_pairs$title),]
df_pairs$title <- as.factor(df_pairs$title)
info <- nodes
count = data.frame()
for (name in sort(unique(data$First_Name))) {
if (any(df_pairs == name)){
count = rbind(count,data.frame(Connections = length(which(df_pairs == name))*2))
}else {count = rbind(count,data.frame(Connections = 4))}
}
nodes <- cbind(nodes,data.frame(Connections = count))
nodes$shape <- "dot"
nodes$shadow <- TRUE # Nodes will drop shadow
nodes$label <- NULL # Node label
#nodes$title <- paste0("Name : ", nodes$id, "<br> Email : ", nodes$Email , "<br> Skill : ", nodes$Skills)
nodes$title <- nodes$id
nodes$size <- nodes$Connections # Node size
nodes$borderWidth <- 2 # Node border width
nodes$font.size <- 0
palet = colorRampPalette(brewer.pal(length(unique(skills_sort)),"Pastel1"))
colors = data.frame(skills = sort(unique(skills_sort)), colors = c(color = palet(length(unique(skills_sort)))))
nodes$color.background <- "#4bd8c1"
nodes$color.border <- "#42b2a0"
nodes$color.highlight.background <- "#4bd8c1"
nodes$color.highlight.border <- "red"
df_pairs$color <-colors$colors[match(df_pairs$title,colors$skills)]  # line color
df_pairs$arrows <- "to" # arrows: 'from', 'to', or 'middle'
df_pairs$smooth <- TRUE    # should the edges be curved?
df_pairs$shadow <- FALSE    # edge shadow
df_pairs$width <- 5    # edge shadow
# server.R
